
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}

http {
lua_package_path '/umeserver\s+[0-9]+\.[0-9]+\.[0-9]+\.[0-9]sr/local/openresty/lualib/resty/?.lua;/usr/local/openresty/nginx/lua/?.lua;/home/oupeng/openresty-test/lua/?.lua;;'; #lua文件默认路径
lua_package_cpath '/usr/local/openresty/lualib/?.so;;'; #so文件默认路径

  server {
        listen 6699;
        server_name _;
#resolver 114.114.114.114;

        location  /test {
			content_by_lua_block {
		        local lru_cache = require "resty.lrucache"
				local resolv =  require "resty.dns.resolver"

				local cache_storage = lru_cache.new(200)

				local _is_addr =  function(addr)
				     return ngx.re.find(addr, [[\d+\.\d+\.\d+\.\d+$]])
				end 

				local _get_addr = function(hostname)
				    if _is_addr(hostname) then
				         return hostname,hostname
                                end

			        local addr = cache_storage:get(hostname)
				    if addr then
			            return addr,hostname
			        end
                    
                                local r,err = resolv:new({
				        nameservers = {'192.168.43.1'},#/etc/resolv.conf文件的DNS服务器地址
                                        trans = 5,
					timeout = 3000,
				})  
				      
				if not r then
					return nil,hostname
				end

				local answers,err =  r:query(hostname,{qtype = r.TYPE_A})

				for i,res in ipairs(answers) do
					if res.address then
					    cache_storage:set(hostname,res.address,300)
					    return res.address,hostname	 
					end
				end
				    return nil,hostname
				end

				ngx.say(_get_addr("www.baidu.com"))
				ngx.say(_get_addr("192.168.0.1"))
			}
		}
  }

}

